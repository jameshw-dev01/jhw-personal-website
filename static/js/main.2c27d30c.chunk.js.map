{"version":3,"sources":["navbar.js","main.js","wordle/wordle.js","wordle/board.js","wordle/wordle-guessor.js","wordle/guessor-board.js","wordle/wordle-page.js","wiki-game/wiki-game-page.js","index.js"],"names":["NavBar","props","react_default","a","createElement","class","id","dist","to","aria-current","Section","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","style","width","height","maxWidth","maxHeight","src","image","title","subtitle","contents","map","info","React","Component","netProps","pythonProps","cProps","Main","_React$Component2","apply","arguments","inherits","createClass","key","value","Fragment","main_Section","alt","Wordle","words","length","undefined","wordleWords","rand","Math","floor","random","gameWord","wordSample","wordSet","Set","forEach","word","add","won","attempts","foundLetterPosition","foundLetterWrongPosition","wrongLetters","has","i","JSON","stringify","_step","letters","split","_iterator","_createForOfIteratorHelper","s","n","done","letterPos","parse","err","e","f","_this2","isWordValid","Error","push","result","_loop","char","includes","slice","filter","every","guessed","_this3","resultAtI","guessedChar","knownLetters","pair","Guess","keyEvent","inputRefs","current","focus","keyCode","onEnter","inputElements","className","background","onKeyUp","keyUp","maxLength","onChange","event","ref","onKeyDown","keyDown","enterKeyHint","disabled","isEditable","Board","backgrounds","guessRefs","j","createRef","state","guesses","Array","from","fill","numGuesses","helpText","game","setState","newGuesses","toConsumableArray","target","guessNum","join","toLowerCase","ans","guessWord","tempBackground","index","error","board_Guess","_this4","renderGuess","onClick","onRestart","WordleGuessor","possibleWords","isWordPossible","updateState","goodWords","letterCounts","countLetterOccurences","concat","commonLettersStrategy","maximizeInformationStrategy","findBestWord","Map","prev","get","set","wordsToRank","wordsWithScore","score","sort","b","combinedCounts","letterCount","checkedLetters","testWord","testGame","options","possibleAnswer","bestWord","minOfMaxPossibleWords","calculateOptions","maxPossibleWords","wordle_guessor_createForOfIteratorHelper","values","answers","ResultChooser","refs","GuessBoard","selectRefs","guessor","newGuess","generateGuess","reportedResult","tempBackgrounds","updateGameState","newGame","rendered","WordlePage","board_Board","guessor_board","WikiContext","split_obj","text","href","link","WikiPage","start_link","end_link","searched_links","titles","intros","contexts","help_text","sendGameInfo","bind","assertThisInitialized","fetch","encodeURIComponent","then","response","status","json","data","rel","type","router","createHashRouter","path","element","main_Main","wordle_page_WordlePage","wiki_game_page_WikiPage","ReactDOM","render","react_router_dist","document","getElementById"],"mappings":"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","file":"static/js/main.2c27d30c.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function NavBar(props) {\n    return (<nav>\n        <div class=\"container-fluid\">\n            <div class=\"navbar-expand\" id=\"navbarSupportedContent\">\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li class=\"nav-item\">\n                    <Link to=\"/\" class=\"nav-link\" aria-current=\"page\">Home</Link>\n                </li>\n                <li class=\"nav-item\">\n                    <Link to=\"wordle\" class=\"nav-link\">Wordle</Link>\n                </li>\n                <li class=\"nav-item\">\n                    <Link to=\"wIKI\" class=\"nav-link\">Wiki Game</Link>\n                </li>\n            </ul>\n            </div>\n        </div>\n    </nav>)\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport NavBar from './navbar'\nclass Section extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(props);\n    }\n    render() {\n        return (\n            <div class=\"row bg-secondary bg-opacity-50 shadow m-2\">\n                <div class=\"col-md-6 d-flex justify-content-center\">\n                    <img class=\"rounded mx-auto d-block m-5\" style={{width:\"auto\", height: \"auto\", maxWidth:\"100%\", maxHeight: \"100%\"}} src={this.props.image}/>\n                </div>\n                <div class=\"col-md-6\">\n                <div class=\"m-2\">\n                    <h3>{this.props.title}</h3>\n                    <h4>{this.props.subtitle}</h4>\n                    <ul>\n                    {this.props.contents && this.props.contents.map((info)=> {return <li>{\"- \" + info}</li>})}\n                    </ul>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nlet netProps = {\n    title: \"C#: 2 years experience\", \n    subtitle: \".NET Framework, Core and ASP.NetCore\",\n    image: \"img/dotnet-logo.png\",\n    contents: [\"Profound Medical: Ported a large (1M lines) application from .NET Framework 4.8 to .NET 6\",\n\"Profound Medical: Built an Automated UI test framework to test that application\",\n\"Profound Medical: Built a simulator that emulates MRI scanning an object in different orientations\",\n\"Profound Medical: Rewrote a WebSockets application to use ASP.NetCore\"]\n}\nlet pythonProps = {\n    title: \"Python: 3 years experience\",\n    subtitle: \"NumPy, Matplotlib, OpenCV, PyTorch\",\n    image: \"img/python-logo.png\",\n    contents: [\n        \"CSC320 Intro Visual Computing: Used Numpy and OpenCV for image processing assignments\",\n        \"CSC311 Intro Machine Learning: Used Numpy, Matplotlib and Pytorch for machine learning tasks and visualizations\",\n        \"CSC384 Intro Artificial Intelligence: Used Python to play Checkers and do parts of speech tagging\",\n        \"Analyzed course evaluations to find trends in difficulty\",\n        \"Created a Wordle solver that works perfectly on the standard word list\"\n    ]\n}\nlet cProps = {\n    title: \"C: 1 year experience\",\n    subtitle: \"UNIX, Physics simulations\",\n    image: \"img/clang.png\",\n    contents: [\n        \"CSC369 Operating Systems: Used C to implement a threading library and a simple file system\",\n        \"Profound Medical: Ported ultrasound heating simulation from C to Dotnet 6\"\n    ]\n}\nexport class Main extends React.Component {\n    render() {\n        return <>\n        <div class=\"gradient-background\">\n            <NavBar/>\n            <div class=\"jumbotron container\">\n                <h1 class=\"text-center text-primary\">James Widjaja</h1>\n                <h2 class=\"text-center text-secondary\">Experience with Machine Learning, Enterprise Applications, and React</h2>\n            </div>\n            <div class=\"m-2\">\n                <h1 class=\"text-center\">Languages</h1>\n                <Section {...netProps}/>\n                <Section {...pythonProps}/>\n                <Section {...cProps}/>\n            </div>\n            <div class=\"m-2\">\n                <h1 class=\"text-center\">Projects</h1>\n                <div class=\"row m-2\">\n                <div class=\"col-sm-4\">\n                <div class=\"card\" style={{width: \"18rem\"}}>\n                    <Link to=\"wordle\">\n                        <img src=\"img/wordle.png\" class=\"card-img-top\" alt=\"...\"/>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">Sample wordle app with a tool to suggest best word</p>\n                        </div>\n                    </Link>\n                </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <div class=\"card\" style={{width: \"18rem\"}}>\n                        <Link to=\"wiki\">\n                            <img src=\"img/wikipedia_search.jpg\" class=\"card-img-top\" alt=\"...\"/>\n                            <div class=\"card-body\">\n                                <p class=\"card-text\">Wikipedia Path Finder with AI Embeddings</p>\n                            </div>\n                        </Link>\n                    </div>\n                </div>\n                </div>\n            </div>\n        </div>\n        </>;\n    }\n}","//@ts-check\nimport wordleWords from './words.json'\nclass Wordle {\n    /**@param {Array<string>} words */\n    constructor(words = []) {\n        if (words.length === 0) {\n            words = wordleWords[\"words\"];\n        }\n        let rand = Math.floor(Math.random() * words.length)\n        this.gameWord = words[rand];\n        console.log(this.gameWord);\n        this.wordSample = words;\n        /** @type {Set<String>} */\n        this.wordSet = new Set();\n        words.forEach(word => this.wordSet.add(word))\n        this.won = false;\n        this.attempts = [];\n        /** @type {Array<string>} */\n        this.foundLetterPosition = [\"\", \"\", \"\", \"\", \"\"];\n        /** @type {Set<string>} */\n        this.foundLetterWrongPosition = new Set();\n        /** \n         * @type {Set<string>} \n         * Note that wordle can return grey tiles if a guess has\n         * 2 letters but only 1 letter in the word. In this case\n         * the letter is not added to the set.\n        */\n        this.wrongLetters = new Set();\n    }\n\n    /** \n     * @param {string} word\n     * @returns {boolean} */\n    isWordValid(word) {\n        return this.wordSet.has(word);\n    }\n\n    /** \n     * @param {string} word\n     * @returns {boolean} */\n    isWordPossible(word) {\n        for (let i = 0; i < word.length; i++) {\n            if (this.wrongLetters.has(word[i])) {\n                return false;\n            }\n        }\n        for (let i = 0; i < word.length; i++) {\n            if (this.foundLetterPosition[i] !== \"\" && word[i] !== this.foundLetterPosition[i]) {\n                return false;\n            }\n            if (this.foundLetterWrongPosition.has(JSON.stringify([word[i], i]))) {\n                return false;\n            }\n        }\n        let letters = new Set(word.split(''));\n        for (let letterPos of this.foundLetterWrongPosition) {\n            if (!letters.has(JSON.parse(letterPos)[0])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /** @param {string} word \n     * @returns {Array<string>}\n    */\n    guessWord(word) {\n        if (!this.isWordValid(word)) {\n            throw new Error(\"Not in word list\")\n        }\n        this.attempts.push(word);\n        let result = ['-', '-', '-', '-', '-'];\n        for (let i = 0; i < 5; i++) {\n            let char = word[i];\n            if (char === this.gameWord[i]) {\n                this.foundLetterPosition[i] = char\n                result[i] = '=';\n            } \n            else if (this.gameWord.includes(char)) {\n                // Only sets if less or equal number of letters\n                this.foundLetterWrongPosition.add(JSON.stringify([char, i]));\n                \n                if (word.slice(0, i).split(\"\").filter(value => value === char).length\n                <= this.gameWord.split(\"\").filter(value => value === char).length) {\n                    result[i] = '+';\n                }\n            } \n            else {\n                this.wrongLetters.add(char);\n            }\n        }\n        if (result.every(char => char === '=')) {\n            this.won = true;\n        }\n        return result;\n    }\n\n    /**\n     * @param {Array<string>} guessed\n     * @param {Array<string>} result\n     */\n    updateState(guessed, result) {\n        this.attempts.push(guessed);\n        result.forEach((resultAtI, i) => {\n            let guessedChar = guessed[i];\n            if (resultAtI === '=') {\n                this.foundLetterPosition[i] = guessedChar;\n            } else if (resultAtI === '+') {\n                this.foundLetterWrongPosition.add(JSON.stringify([guessedChar, i]));\n            } else {\n                // wordle gives negative for repeated letters, which must be filtered\n                let knownLetters = new Set();\n                this.foundLetterWrongPosition.forEach(pair => {\n                    knownLetters.add(JSON.parse(pair)[0]);\n                });\n                if (!knownLetters.has(guessedChar) \n                && !this.foundLetterPosition.includes(guessedChar)) {\n                    this.wrongLetters.add(guessedChar);\n                }\n            }\n        });\n    }\n}\nexport default Wordle","import React from 'react'\nimport Wordle from './wordle'\nimport './board.css'\n\nclass Guess extends React.Component {\n    /**\n     * @param {React.KeyboardEvent} keyEvent \n     * @param {number} i \n     */\n    keyUp(keyEvent, i) {\n        if (keyEvent.key === \"Backspace\") {\n            if (this.props.inputRefs[i].current.value === \"\"\n            && i > 0 && keyEvent) {\n                this.props.inputRefs[i - 1].current.focus();\n            }\n        }\n        else if (i < 4) {\n            this.props.inputRefs[i + 1].current.focus();\n        }\n    }\n    keyDown(keyEvent, i) {\n        console.log(keyEvent);\n        if (keyEvent.keyCode === 13 && i===4) {\n            this.props.onEnter();\n        }\n    }\n    render() {\n        let inputElements = [];\n        for (let i = 0; i < 5; i++) {\n            inputElements.push(\n            <input className={\"tile \" + this.props.background[i]}\n                onKeyUp={keyEvent=> this.keyUp(keyEvent, i)} \n                maxLength={1}\n                value={this.props.value[i]}\n                onChange={event => this.props.onChange(event, i)}\n                ref={this.props.inputRefs[i]}\n                onKeyDown={keyEvent => this.keyDown(keyEvent, i)} \n                enterKeyHint={i < 4 ? \"next\": \"done\"}\n                disabled={!this.props.isEditable}>\n                </input>)\n        }\n        return (\n            <div>\n                {inputElements}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        let backgrounds = []\n        this.guessRefs = [];\n        for (let i = 0; i < 6; i++) {\n            this.guessRefs.push([]);\n            backgrounds.push([]);\n            for (let j = 0; j < 5; j++) {\n                this.guessRefs[i].push(React.createRef());\n                backgrounds[i].push(\"white\");\n            }\n        }\n        this.state = {\n            guesses: Array.from(Array(6), () => new Array(5).fill(\"\")),\n            backgrounds: backgrounds,\n            numGuesses: 0,\n            helpText: '',\n            game: new Wordle()\n        };\n        this.setState({});\n    }\n\n    onChange(event, i) {\n        let newGuesses = [...this.state.guesses];\n        newGuesses[this.state.numGuesses] = [...newGuesses[this.state.numGuesses]];\n        newGuesses[this.state.numGuesses][i] = event.target.value;\n        this.setState({guesses: newGuesses});\n    }\n\n    onEnter(guessNum) {\n        let word = this.state.guesses[this.state.numGuesses].join(\"\");\n        word = word.toLowerCase();\n        try {\n            let ans = this.state.game.guessWord(word);\n            let tempBackground = this.state.backgrounds;\n            ans.forEach((result, index) => {\n                if (result === '=') {\n                    tempBackground[guessNum][index] = \"green\";\n                } else if (result === '+') {\n                    tempBackground[guessNum][index] = \"yellow\";\n                } else {\n                    tempBackground[guessNum][index] = \"gray\";\n                }\n            })\n            let numGuesses = this.state.numGuesses;\n            this.setState({numGuesses:this.state.numGuesses+1});\n            this.setState({background:tempBackground});\n            if (this.state.game.won) {\n                this.setState({helpText:\"Congratulations! \"});\n            } else if (numGuesses > 5) {\n                this.setState({helpText:\"Too bad, the word was \" + this.state.game.gameWord});\n            } else {\n                this.setState({helpText:\"\"})\n            }\n        }\n        catch (error){\n            console.log(error);\n            this.setState({helpText:\"Invalid word!\"});\n        }\n    }\n\n    onRestart() {\n        let backgrounds = [];\n        for (let i = 0; i < 6; i++) {\n            backgrounds.push([]);\n            for (let j = 0; j < 5; j++) {\n                backgrounds[i].push(\"white\");\n            }\n        }\n        this.setState({\n            guesses: Array.from(Array(6), () => new Array(5).fill(\"\")),\n            backgrounds: backgrounds,\n            numGuesses: 0,\n            helpText:'',\n            game: new Wordle()\n        });\n    }\n\n\n    renderGuess(i) {\n        return (\n            <Guess key={\"wordleRow\" + i}\n            inputRefs={this.guessRefs[i]}\n            isEditable={i===this.state.numGuesses} \n            onEnter={()=>{\n                if (i === this.state.numGuesses) {\n                    this.onEnter(i);\n                }\n            }}\n            onChange={(event, j)=>{\n                if (i === this.state.numGuesses) {\n                    this.onChange(event, j);\n                }}\n            }\n            value={this.state.guesses[i]}\n            background={this.state.backgrounds[i]}\n            />\n        );\n    }\n\n    render() {\n        let guesses = [];\n        for (let i = 0; i < 6; i++) {\n            guesses.push(this.renderGuess(i))\n        }\n        return (\n            <div>\n            <h2>{this.state.helpText}</h2>\n            <button title=\"Restart\" onClick={() => this.onRestart()}>Restart</button>\n                {guesses}\n            </div>\n        );\n    }\n}\nexport {Guess, Board}","//@ts-check\nimport Wordle from './wordle'\nclass WordleGuessor {\n    /**\n     * \n     * @param {Wordle} game \n     */\n    // @ts-ignore\n    constructor(game = null) {\n        this.game = game;\n        /** @type{string[]} */\n        this.possibleWords = [];\n        if (this.game !== null) {\n            this.possibleWords = JSON.parse(JSON.stringify(game.wordSample));\n        }\n    }\n\n    /**\n     * Inputs the guess into the game\n     * Used when game word is known\n     * @param {string} word \n     */\n    guessWord(word) {\n        this.game.guessWord(word);\n        this.possibleWords = this.possibleWords.filter(word => this.game.isWordPossible(word));\n    }\n    /**\n     * Records the results of a guess when game word is unknown\n     * @param {string} word \n     * @param {string} result \n     */\n    updateGameState(word, result) {\n        this.game.updateState(word.split(\"\"), result.split(\"\"));\n        console.log(result);\n        console.log(this.game.foundLetterPosition);\n        console.log(this.game.foundLetterWrongPosition);\n        console.log(this.game.wrongLetters);\n        this.possibleWords = this.possibleWords.filter(word => this.game.isWordPossible(word));\n        console.log(this.possibleWords);\n    }\n\n    /**\n     * \n     * @param {Wordle} game \n     */\n    newGame(game) {\n        this.game = game;\n        this.possibleWords = JSON.parse(JSON.stringify(game.wordSample));\n    }\n\n    /**\n     * @returns {string} the best word according to the strategy\n     */\n    generateGuess() {\n        if (this.game.attempts.length === 0) {\n            return \"raise\";\n        }\n        let goodWords = [];\n        let letterCounts = this.countLetterOccurences(this.possibleWords);\n        goodWords = goodWords.concat(this.commonLettersStrategy(this.possibleWords, letterCounts).slice(0, 10));\n        goodWords = goodWords.concat(this.maximizeInformationStrategy(this.game.wordSample, letterCounts).slice(0, 10));\n        return this.findBestWord(goodWords);\n    }\n\n    /**\n     * @param {Array<string>} words list of words to analyze, assumed to all be equal length\n     * @returns {Array<Map<string, number>>} a list of length word length, where each element is the letter count for that position\n     */\n    countLetterOccurences(words) {\n        /** @type {Array<Map<string, number>>} */\n        let letterCounts = [];\n        for (let i = 0; i < 5; i++) {\n            letterCounts.push(new Map());\n        }\n        words.forEach(word => {\n            for (let i = 0; i < word.length; i++) {\n                if (letterCounts[i].has(word[i])) {\n                    const prev = letterCounts[i].get(word[i]);\n                    // @ts-ignore\n                    letterCounts[i].set(word[i], prev + 1);\n                } else {\n                    letterCounts[i].set(word[i], 1);\n                }\n            }\n        });\n        return letterCounts;\n    }\n\n    /**\n     * \n     * @param {string[]} wordsToRank \n     * @param {Map<string, number>[]} letterCounts \n     * @returns {string[]}\n     */\n    commonLettersStrategy(wordsToRank, letterCounts) {\n        /** @type {[string, number][]} */\n        let wordsWithScore = [];\n        wordsToRank.forEach(word => {\n            let score = 0;\n            for (let i = 0; i < word.length; i++) {\n                if (letterCounts[i].has(word[i])) {\n                    // @ts-ignore\n                    score += letterCounts[i].get(word[i]);\n                }\n            }\n            wordsWithScore.push([word, score]);\n        });\n        wordsWithScore.sort((a, b) => b[1] - a[1]);\n        return wordsWithScore.map(pair => pair[0]);\n    }\n\n    /**\n     * @param {string[]} wordsToRank \n     * @param {Map<string, number>[]} letterCounts \n     * @returns {string[]}\n     */\n    maximizeInformationStrategy(wordsToRank, letterCounts) {\n        /** @type{Map<string, number>} */\n        let combinedCounts = new Map();\n        /** @type {[string, number][]} */\n        let wordsWithScore = [];\n        /** @type {number} */\n        let maxScore = 0;\n        letterCounts.forEach(letterCount => {\n            letterCount.forEach((value, key) => {\n                if (!combinedCounts.has(key)) {\n                    combinedCounts.set(key, value)\n                } else {\n                    // @ts-ignore\n                    combinedCounts.set(key,combinedCounts.get(key) + value);\n                }\n            });\n        });\n        wordsToRank.forEach(word => {\n            let score = 0;\n            let checkedLetters = [];\n            for (let i = 0; i < word.length; i++) {\n                if (this.game.wrongLetters.has(word[i])) {\n                    continue;\n                } else if (this.game.foundLetterPosition.includes(word[i])) {\n                    continue;\n                }\n                checkedLetters.push(word[i]);\n                let firstLetters = word.slice(0, i);\n                if (!firstLetters.includes(word[i])) {\n                    if (combinedCounts.has(word[i])) {\n                        // @ts-ignore\n                        score += combinedCounts.get(word[i]);\n                    }\n                    if (letterCounts[i].has(word[i])) {\n                        // @ts-ignore\n                        score += letterCounts[i].get(word[i]);\n                    }\n                }\n            }\n            wordsWithScore.push([word,score])\n        });\n        wordsWithScore.sort((a, b) => b[1] - a[1]);\n        return wordsWithScore.map(pair => pair[0]);\n    }\n\n    /**\n     * \n     * @param {string} testWord \n     * @returns {Map<string, string[]>} map of possible result of guessing testWord to all the possible answers \n     * that would cause that result\n     */\n    calculateOptions(testWord) {\n        let testGame = new Wordle();\n        /** @type{Map<string, string[]>} */\n        const options = new Map();\n        this.possibleWords.forEach(possibleAnswer => {\n            testGame.gameWord = possibleAnswer;\n            const result = testGame.guessWord(testWord).join();\n            if (options.has(result)) {\n                // @ts-ignore\n                options.get(result).push(possibleAnswer);\n            } else {\n                options.set(result, [possibleAnswer]);\n            }\n        });\n        return options;\n    }\n\n    /**\n     * \n     * @param {string[]} wordsToRank \n     */\n    findBestWord(wordsToRank) {\n        let bestWord = wordsToRank[0];\n        let minOfMaxPossibleWords = this.possibleWords.length;\n        wordsToRank.forEach(word => {\n            let options = this.calculateOptions(word);\n            let maxPossibleWords = 0;\n            for (const answers of options.values()) {\n                if (answers.length > maxPossibleWords) {\n                    maxPossibleWords = answers.length;\n                }\n            };\n            if (options.has(\"=,=,=,=,=\")){\n                maxPossibleWords -= 0.5;\n            }\n            if (maxPossibleWords < minOfMaxPossibleWords) {\n                minOfMaxPossibleWords = maxPossibleWords;\n                bestWord = word;\n            }\n        });\n        return bestWord;\n     }\n}\nexport default WordleGuessor","import React from 'react';\nimport {Guess} from './board'\nimport Wordle from './wordle'\nimport WordleGuessor from './wordle-guessor'\nimport './board.css'\n\nfunction ResultChooser(props) {\n    let inputElements = [];\n    for(let i=0; i <5; i++) {\n        inputElements.push(\n        <select className=\"tile\"\n        key={\"chooser \" + i}\n        ref={props.refs[i]}>\n            <option value=\"green\" className=\"green\">Green</option>\n            <option value=\"yellow\" className=\"yellow\">Yellow</option>\n            <option value=\"gray\" className=\"gray\">Gray</option>\n        </select>);\n    }\n    return (\n        <>\n        {inputElements}\n        </>\n        );\n}\nclass GuessBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        let backgrounds = []\n        this.guessRefs = [];\n        this.selectRefs = [];\n        for (let i=0; i<5; i++) {\n            this.selectRefs.push(React.createRef());\n        }\n        for (let i = 0; i < 6; i++) {\n            this.guessRefs.push([]);\n            backgrounds.push([]);\n            for (let j = 0; j < 5; j++) {\n                this.guessRefs[i].push(React.createRef());\n                backgrounds[i].push(\"white\");\n            }\n        }\n        let game = new Wordle();\n        let guessor = new WordleGuessor(game);\n        let guesses = Array.from(Array(6), () => new Array(5).fill(\"\"));\n        const newGuess = guessor.generateGuess();\n        guesses[0] = newGuess.split(\"\");\n        this.state = {\n            guesses: guesses,\n            backgrounds: backgrounds,\n            numGuesses: 0,\n            helpText: '',\n            game: game,\n            guessor: guessor\n        };\n    }\n\n    onEnter() {\n        let word = this.state.guesses[this.state.numGuesses].join(\"\");\n        word = word.toLowerCase();\n        if (!this.state.guessor.game.isWordValid(word)) {\n            this.setState({helpText:\"Invalid word!\"});\n            return;\n        }\n        let reportedResult = '';\n        let tempBackgrounds = this.state.backgrounds;\n        this.selectRefs.forEach((ref, i) => {\n            tempBackgrounds[this.state.numGuesses][i] = ref.current.value;\n            if (ref.current.value === \"green\") {\n                reportedResult = reportedResult.concat('=');\n            } else if (ref.current.value === \"yellow\") {\n                reportedResult = reportedResult.concat('+');\n            } else if (ref.current.value === \"gray\") {\n                reportedResult = reportedResult.concat('-');\n            } else {\n                this.setState({helpText:\"Please select results\"});\n                return;\n            }\n        });\n        this.setState({background:tempBackgrounds});\n        this.state.guessor.updateGameState(word, reportedResult);\n        const newGuess = this.state.guessor.generateGuess();\n        let newGuesses = [...this.state.guesses];\n        newGuesses[this.state.numGuesses+1] = newGuess.split(\"\");\n        this.setState({numGuesses:this.state.numGuesses+1, guesses: newGuesses});\n    }\n\n    onChange(event, i) {\n        let newGuesses = [...this.state.guesses];\n        newGuesses[this.state.numGuesses] = [...newGuesses[this.state.numGuesses]];\n        newGuesses[this.state.numGuesses][i] = event.target.value;\n        this.setState({guesses: newGuesses});\n    }\n\n    onRestart() {\n        let backgrounds = [];\n        for (let i = 0; i < 6; i++) {\n            backgrounds.push([]);\n            for (let j = 0; j < 5; j++) {\n                backgrounds[i].push(\"white\");\n            }\n        }\n        let newGame = new Wordle();\n        let newGuesses = Array.from(Array(6), () => new Array(5).fill(\"\"))\n        const newGuess = this.state.guessor.generateGuess();\n        newGuesses[0] = newGuess.split(\"\");\n        this.setState({\n            guesses:  newGuesses,\n            backgrounds: backgrounds,\n            numGuesses: 0,\n            helpText:'',\n            game: newGame,\n            guessor: new WordleGuessor(newGame)\n        });\n        \n        this.setState({guesses: newGuesses});\n    }\n\n\n    renderGuess(i) {\n        return (\n            <Guess inputRefs={this.guessRefs[i]}\n            value={this.state.guesses[i]}\n            key={\"guess \" + i}\n            isEditable={i===this.state.numGuesses}\n            onEnter={()=>{\n                if (i === this.state.numGuesses) {\n                    this.onEnter();\n                }\n            }}\n            onChange={(event, j)=>{\n                if (i === this.state.numGuesses) {\n                    this.onChange(event, j);\n                }}\n            }\n            background={this.state.backgrounds[i]}\n            />\n        );\n    }\n\n    render() {\n        let rendered = [];\n        for (let i = 0; i < 6; i++) {\n            rendered.push(this.renderGuess(i));\n        }\n        return (\n            <div>\n                <h2>{this.state.helpText}</h2>\n                <button title=\"Restart\" onClick={() => this.onRestart()}>Restart</button>\n                <div>\n                    <p>Enter the result of the suggested guess, or your own word, here</p>\n                    <ResultChooser refs={this.selectRefs}/>\n                    {rendered}\n                </div>\n            </div>\n        );\n    }\n}\nexport default GuessBoard","\nimport React from 'react'\nimport {Board} from './board'\nimport GuessBoard from './guessor-board'\nimport NavBar from '../navbar'\nexport default class WordlePage extends React.Component {\n    render() {\n    return (\n    <div class=\"gradient-background\">\n    <NavBar/>\n    <h1 class=\"text-center text-primary\">Wordle solver</h1>\n    <p class=\"m-4\">I was curious whether Wordle has a strategy that always allow a guess within 6 moves. \n    I created a solver that uses heuristics based on letter frequencies and showed that it is possible, given\n    the limited word list of 2315 words. Wordle does accept more words, \n    but the correct answer will be drawn from that word list. My implementation is not \"optimal\"\n    because it does not definitely minimize the average number of attempts, but it is good enough to never lose.\n    In fact, it is possible that a better algorithm can guess all words in 5 guesses, since my algorithm only\n    has about 10 words that take 6 guesses. </p>\n    <div class=\"row\">\n        <div class=\"col-md-6 d-flex justify-content-center\">\n            <div class=\"text-center\">\n                <h3>My Wordle copy</h3>\n                <Board/>\n            </div>\n        </div>\n        <div class=\"col-md-6 d-flex justify-content-center\">\n            <div class=\"text-center\">\n                <h3>Wordle solver</h3>\n                <GuessBoard/>\n            </div>\n        </div>\n    </div>\n    </div>)\n    }\n}","import React from 'react'\nimport NavBar from '../navbar'\n\nfunction WikiContext(props) {\n    let split_obj = props.text.split(\"*\")\n    return <>{split_obj[0]}\n            <a href={\"https://en.wikipedia.org\"+props.link}>{split_obj[1]}</a>\n            {split_obj[2]}</>\n}\nexport default class WikiPage extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            start_link: '/wiki/Leo_Tolstoy',\n            end_link: '/wiki/Dolphin',\n            searched_links: [],\n            titles: [],\n            intros: [],\n            contexts: [],\n            help_text: \"\"\n        };\n        this.sendGameInfo = this.sendGameInfo.bind(this);\n    }\n\n    sendGameInfo() {\n        this.setState({help_text: \"Processing, please wait\"})\n        fetch(\"https://api.wiki-pages-project.com/api?start=\"+encodeURIComponent(this.state.start_link)+\"&end=\"+encodeURIComponent(this.state.end_link))\n        .then(response => {\n            console.log(response);\n            if (response.status === 200) {\n                response.json().then(data => {\n                    this.setState({\n                        searched_links: data[\"searched_links\"],\n                        titles: data[\"titles\"],\n                        intros: data[\"intros\"],\n                        contexts: data[\"link_contexts\"],\n                        help_text: \"\"\n                    })\n                })\n            }\n            else {\n                this.setState({\n                    searched_links: [],\n                    titles: [],\n                    intros: [],\n                    contexts: [],\n                    help_text: \"Something went wrong\"\n                })\n            }\n        })\n    }\n    render() {\n    return (\n    <div class=\"gradient-background\">\n        <NavBar/>\n        <div class=\"p-4\">\n        <h1 class=\"text-center text-primary\">Wikipedia Pathfinder With Embeddings</h1>\n        <p>\n            One of my pastimes is playing the <a href=\"https://www.thewikigame.com/group\" target=\"_blank\" rel=\"noopener noreferrer\">wiki game</a>\n            The objective of the wiki game is to navigate to a selected page in Wikipedia from a random page, \n            using only internal wikipedia links. The wiki game is rather well known as it is often used as an example\n            to show the interrelatedness of different concepts. It's the internet version of \"6 degrees of separation\".\n        </p>\n        <p>\n            The game is a test of trivia knowledge and creativity in finding links between topics. For example, \n            try find a path from \"Leo Tolstoy\" to \"Dolphin\". The way most players would do it is to go through Tolstoy's page,\n            looking for anything sea related. Then they would find a list of marine animals and search for dolphin in that list.\n        </p>\n        <p>\n            I realized that text embeddings encode a measure of relatedness between words, so a program using those embeddings should\n            be able to play this game. I used OpenAI's text-embedding-ada-002 model to create this solver.\n        </p>\n        <p><b>Q: What's so special about that? Can't you just use breadth first search to find a path?</b></p>\n        <p>A: Using search algorithms is against the rules of the game because you have to backtrack. It is true that a \n        search algorithm will give a better answer (see <a href=\"https://www.sixdegreesofwikipedia.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Six degrees of wikipedia</a>).\n        However, the point of this project is to create an AI that plays by human rules: It must select the next page\n        without peeking at the contents, using just its own knowledge to guess whether the page is relevant to the target page.\n        This project demonstrates that OpenAI's embeddings do in fact capture information about how words are related\n        in a useful way.</p>\n        <div>\n            <div>Enter start article</div>\n            <input type=\"text\" value={this.state.start_link} onChange={event=>this.setState({start_link: event.target.value})}/>\n            <a href={\"https://en.wikipedia.org\"+this.state.start_link} target=\"_blank\" rel=\"noopener noreferrer\">Link to Start</a>\n        </div>\n        <div>\n            <div>Enter end article</div>\n            <input type=\"text\" value={this.state.end_link} onChange={event=>this.setState({end_link: event.target.value})}/>\n            <a href={\"https://en.wikipedia.org\"+this.state.end_link} target=\"_blank\" rel=\"noopener noreferrer\">Link to End</a>\n        </div>\n        <button onClick={this.sendGameInfo}>Play!</button>\n        <h2>Searched links</h2>\n        <h3>{this.state.help_text}</h3>\n        <>{this.state.searched_links.slice(0,-1).map((link, i) => {\n            return <>\n                        <h2><a href={\"https://en.wikipedia.org\"+link} target=\"_blank\" rel=\"noopener noreferrer\">{this.state.titles[i]}</a></h2>\n                        <p>{this.state.intros[i]}</p>\n                        <p>...</p>\n                        <p>...</p>\n                        <p><WikiContext text={this.state.contexts[i]} link={this.state.searched_links[i+1]} target=\"_blank\" rel=\"noopener noreferrer\"/></p>\n                    </>\n            })}</>\n        </div>\n    </div>)\n    }\n}","'use strict';\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n    createHashRouter,\n    RouterProvider,\n} from \"react-router-dom\"\nimport { Main } from './main';\nimport WordlePage from './wordle/wordle-page'\nimport WikiPage from './wiki-game/wiki-game-page';\n\nconst router = createHashRouter([\n    {\n      path: \"/\",\n      element: <Main/>,\n    },\n    {\n        path: \"/wordle\",\n        element: <WordlePage/>\n    },\n    {\n      path: \"/wiki\",\n      element: <WikiPage/>\n    }\n  ]);\nReactDOM.render(\n      <RouterProvider router={router}/>, document.getElementById('main')\n);"],"sourceRoot":""}