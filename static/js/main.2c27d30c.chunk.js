(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{18:function(e,t,a){},20:function(e){e.exports={words:["aback","abase","abate","abbey","abbot","abhor","abide","abled","abode","abort","about","above","abuse","abyss","acorn","acrid","actor","acute","adage","adapt","adept","admin","admit","adobe","adopt","adore","adorn","adult","affix","afire","afoot","afoul","after","again","agape","agate","agent","agile","aging","aglow","agony","agora","agree","ahead","aider","aisle","alarm","album","alert","algae","alibi","alien","align","alike","alive","allay","alley","allot","allow","alloy","aloft","alone","along","aloof","aloud","alpha","altar","alter","amass","amaze","amber","amble","amend","amiss","amity","among","ample","amply","amuse","angel","anger","angle","angry","angst","anime","ankle","annex","annoy","annul","anode","antic","anvil","aorta","apart","aphid","aping","apnea","apple","apply","apron","aptly","arbor","ardor","arena","argue","arise","armor","aroma","arose","array","arrow","arson","artsy","ascot","ashen","aside","askew","assay","asset","atoll","atone","attic","audio","audit","augur","aunty","avail","avert","avian","avoid","await","awake","award","aware","awash","awful","awoke","axial","axiom","axion","azure","bacon","badge","badly","bagel","baggy","baker","baler","balmy","banal","banjo","barge","baron","basal","basic","basil","basin","basis","baste","batch","bathe","baton","batty","bawdy","bayou","beach","beady","beard","beast","beech","beefy","befit","began","begat","beget","begin","begun","being","belch","belie","belle","belly","below","bench","beret","berry","berth","beset","betel","bevel","bezel","bible","bicep","biddy","bigot","bilge","billy","binge","bingo","biome","birch","birth","bison","bitty","black","blade","blame","bland","blank","blare","blast","blaze","bleak","bleat","bleed","bleep","blend","bless","blimp","blind","blink","bliss","blitz","bloat","block","bloke","blond","blood","bloom","blown","bluer","bluff","blunt","blurb","blurt","blush","board","boast","bobby","boney","bongo","bonus","booby","boost","booth","booty","booze","boozy","borax","borne","bosom","bossy","botch","bough","boule","bound","bowel","boxer","brace","braid","brain","brake","brand","brash","brass","brave","bravo","brawl","brawn","bread","break","breed","briar","bribe","brick","bride","brief","brine","bring","brink","briny","brisk","broad","broil","broke","brood","brook","broom","broth","brown","brunt","brush","brute","buddy","budge","buggy","bugle","build","built","bulge","bulky","bully","bunch","bunny","burly","burnt","burst","bused","bushy","butch","butte","buxom","buyer","bylaw","cabal","cabby","cabin","cable","cacao","cache","cacti","caddy","cadet","cagey","cairn","camel","cameo","canal","candy","canny","canoe","canon","caper","caput","carat","cargo","carol","carry","carve","caste","catch","cater","catty","caulk","cause","cavil","cease","cedar","cello","chafe","chaff","chain","chair","chalk","champ","chant","chaos","chard","charm","chart","chase","chasm","cheap","cheat","check","cheek","cheer","chess","chest","chick","chide","chief","child","chili","chill","chime","china","chirp","chock","choir","choke","chord","chore","chose","chuck","chump","chunk","churn","chute","cider","cigar","cinch","circa","civic","civil","clack","claim","clamp","clang","clank","clash","clasp","class","clean","clear","cleat","cleft","clerk","click","cliff","climb","cling","clink","cloak","clock","clone","close","cloth","cloud","clout","clove","clown","cluck","clued","clump","clung","coach","coast","cobra","cocoa","colon","color","comet","comfy","comic","comma","conch","condo","conic","copse","coral","corer","corny","couch","cough","could","count","coupe","court","coven","cover","covet","covey","cower","coyly","crack","craft","cramp","crane","crank","crash","crass","crate","crave","crawl","craze","crazy","creak","cream","credo","creed","creek","creep","creme","crepe","crept","cress","crest","crick","cried","crier","crime","crimp","crisp","croak","crock","crone","crony","crook","cross","croup","crowd","crown","crude","cruel","crumb","crump","crush","crust","crypt","cubic","cumin","curio","curly","curry","curse","curve","curvy","cutie","cyber","cycle","cynic","daddy","daily","dairy","daisy","dally","dance","dandy","datum","daunt","dealt","death","debar","debit","debug","debut","decal","decay","decor","decoy","decry","defer","deign","deity","delay","delta","delve","demon","demur","denim","dense","depot","depth","derby","deter","detox","deuce","devil","diary","dicey","digit","dilly","dimly","diner","dingo","dingy","diode","dirge","dirty","disco","ditch","ditto","ditty","diver","dizzy","dodge","dodgy","dogma","doing","dolly","donor","donut","dopey","doubt","dough","dowdy","dowel","downy","dowry","dozen","draft","drain","drake","drama","drank","drape","drawl","drawn","dread","dream","dress","dried","drier","drift","drill","drink","drive","droit","droll","drone","drool","droop","dross","drove","drown","druid","drunk","dryer","dryly","duchy","dully","dummy","dumpy","dunce","dusky","dusty","dutch","duvet","dwarf","dwell","dwelt","dying","eager","eagle","early","earth","easel","eaten","eater","ebony","eclat","edict","edify","eerie","egret","eight","eject","eking","elate","elbow","elder","elect","elegy","elfin","elide","elite","elope","elude","email","embed","ember","emcee","empty","enact","endow","enema","enemy","enjoy","ennui","ensue","enter","entry","envoy","epoch","epoxy","equal","equip","erase","erect","erode","error","erupt","essay","ester","ether","ethic","ethos","etude","evade","event","every","evict","evoke","exact","exalt","excel","exert","exile","exist","expel","extol","extra","exult","eying","fable","facet","faint","fairy","faith","false","fancy","fanny","farce","fatal","fatty","fault","fauna","favor","feast","fecal","feign","fella","felon","femme","femur","fence","feral","ferry","fetal","fetch","fetid","fetus","fever","fewer","fiber","fibre","ficus","field","fiend","fiery","fifth","fifty","fight","filer","filet","filly","filmy","filth","final","finch","finer","first","fishy","fixer","fizzy","fjord","flack","flail","flair","flake","flaky","flame","flank","flare","flash","flask","fleck","fleet","flesh","flick","flier","fling","flint","flirt","float","flock","flood","floor","flora","floss","flour","flout","flown","fluff","fluid","fluke","flume","flung","flunk","flush","flute","flyer","foamy","focal","focus","foggy","foist","folio","folly","foray","force","forge","forgo","forte","forth","forty","forum","found","foyer","frail","frame","frank","fraud","freak","freed","freer","fresh","friar","fried","frill","frisk","fritz","frock","frond","front","frost","froth","frown","froze","fruit","fudge","fugue","fully","fungi","funky","funny","furor","furry","fussy","fuzzy","gaffe","gaily","gamer","gamma","gamut","gassy","gaudy","gauge","gaunt","gauze","gavel","gawky","gayer","gayly","gazer","gecko","geeky","geese","genie","genre","ghost","ghoul","giant","giddy","gipsy","girly","girth","given","giver","glade","gland","glare","glass","glaze","gleam","glean","glide","glint","gloat","globe","gloom","glory","gloss","glove","glyph","gnash","gnome","godly","going","golem","golly","gonad","goner","goody","gooey","goofy","goose","gorge","gouge","gourd","grace","grade","graft","grail","grain","grand","grant","grape","graph","grasp","grass","grate","grave","gravy","graze","great","greed","green","greet","grief","grill","grime","grimy","grind","gripe","groan","groin","groom","grope","gross","group","grout","grove","growl","grown","gruel","gruff","grunt","guard","guava","guess","guest","guide","guild","guile","guilt","guise","gulch","gully","gumbo","gummy","guppy","gusto","gusty","gypsy","habit","hairy","halve","handy","happy","hardy","harem","harpy","harry","harsh","haste","hasty","hatch","hater","haunt","haute","haven","havoc","hazel","heady","heard","heart","heath","heave","heavy","hedge","hefty","heist","helix","hello","hence","heron","hilly","hinge","hippo","hippy","hitch","hoard","hobby","hoist","holly","homer","honey","honor","horde","horny","horse","hotel","hotly","hound","house","hovel","hover","howdy","human","humid","humor","humph","humus","hunch","hunky","hurry","husky","hussy","hutch","hydro","hyena","hymen","hyper","icily","icing","ideal","idiom","idiot","idler","idyll","igloo","iliac","image","imbue","impel","imply","inane","inbox","incur","index","inept","inert","infer","ingot","inlay","inlet","inner","input","inter","intro","ionic","irate","irony","islet","issue","itchy","ivory","jaunt","jazzy","jelly","jerky","jetty","jewel","jiffy","joint","joist","joker","jolly","joust","judge","juice","juicy","jumbo","jumpy","junta","junto","juror","kappa","karma","kayak","kebab","khaki","kinky","kiosk","kitty","knack","knave","knead","kneed","kneel","knelt","knife","knock","knoll","known","koala","krill","label","labor","laden","ladle","lager","lance","lanky","lapel","lapse","large","larva","lasso","latch","later","lathe","latte","laugh","layer","leach","leafy","leaky","leant","leapt","learn","lease","leash","least","leave","ledge","leech","leery","lefty","legal","leggy","lemon","lemur","leper","level","lever","libel","liege","light","liken","lilac","limbo","limit","linen","liner","lingo","lipid","lithe","liver","livid","llama","loamy","loath","lobby","local","locus","lodge","lofty","logic","login","loopy","loose","lorry","loser","louse","lousy","lover","lower","lowly","loyal","lucid","lucky","lumen","lumpy","lunar","lunch","lunge","lupus","lurch","lurid","lusty","lying","lymph","lynch","lyric","macaw","macho","macro","madam","madly","mafia","magic","magma","maize","major","maker","mambo","mamma","mammy","manga","mange","mango","mangy","mania","manic","manly","manor","maple","march","marry","marsh","mason","masse","match","matey","mauve","maxim","maybe","mayor","mealy","meant","meaty","mecca","medal","media","medic","melee","melon","mercy","merge","merit","merry","metal","meter","metro","micro","midge","midst","might","milky","mimic","mince","miner","minim","minor","minty","minus","mirth","miser","missy","mocha","modal","model","modem","mogul","moist","molar","moldy","money","month","moody","moose","moral","moron","morph","mossy","motel","motif","motor","motto","moult","mound","mount","mourn","mouse","mouth","mover","movie","mower","mucky","mucus","muddy","mulch","mummy","munch","mural","murky","mushy","music","musky","musty","myrrh","nadir","naive","nanny","nasal","nasty","natal","naval","navel","needy","neigh","nerdy","nerve","never","newer","newly","nicer","niche","niece","night","ninja","ninny","ninth","noble","nobly","noise","noisy","nomad","noose","north","nosey","notch","novel","nudge","nurse","nutty","nylon","nymph","oaken","obese","occur","ocean","octal","octet","odder","oddly","offal","offer","often","olden","older","olive","ombre","omega","onion","onset","opera","opine","opium","optic","orbit","order","organ","other","otter","ought","ounce","outdo","outer","outgo","ovary","ovate","overt","ovine","ovoid","owing","owner","oxide","ozone","paddy","pagan","paint","paler","palsy","panel","panic","pansy","papal","paper","parer","parka","parry","parse","party","pasta","paste","pasty","patch","patio","patsy","patty","pause","payee","payer","peace","peach","pearl","pecan","pedal","penal","pence","penne","penny","perch","peril","perky","pesky","pesto","petal","petty","phase","phone","phony","photo","piano","picky","piece","piety","piggy","pilot","pinch","piney","pinky","pinto","piper","pique","pitch","pithy","pivot","pixel","pixie","pizza","place","plaid","plain","plait","plane","plank","plant","plate","plaza","plead","pleat","plied","plier","pluck","plumb","plume","plump","plunk","plush","poesy","point","poise","poker","polar","polka","polyp","pooch","poppy","porch","poser","posit","posse","pouch","pound","pouty","power","prank","prawn","preen","press","price","prick","pride","pried","prime","primo","print","prior","prism","privy","prize","probe","prone","prong","proof","prose","proud","prove","prowl","proxy","prude","prune","psalm","pubic","pudgy","puffy","pulpy","pulse","punch","pupal","pupil","puppy","puree","purer","purge","purse","pushy","putty","pygmy","quack","quail","quake","qualm","quark","quart","quash","quasi","queen","queer","quell","query","quest","queue","quick","quiet","quill","quilt","quirk","quite","quota","quote","quoth","rabbi","rabid","racer","radar","radii","radio","rainy","raise","rajah","rally","ralph","ramen","ranch","randy","range","rapid","rarer","raspy","ratio","ratty","raven","rayon","razor","reach","react","ready","realm","rearm","rebar","rebel","rebus","rebut","recap","recur","recut","reedy","refer","refit","regal","rehab","reign","relax","relay","relic","remit","renal","renew","repay","repel","reply","rerun","reset","resin","retch","retro","retry","reuse","revel","revue","rhino","rhyme","rider","ridge","rifle","right","rigid","rigor","rinse","ripen","riper","risen","riser","risky","rival","river","rivet","roach","roast","robin","robot","rocky","rodeo","roger","rogue","roomy","roost","rotor","rouge","rough","round","rouse","route","rover","rowdy","rower","royal","ruddy","ruder","rugby","ruler","rumba","rumor","rupee","rural","rusty","sadly","safer","saint","salad","sally","salon","salsa","salty","salve","salvo","sandy","saner","sappy","sassy","satin","satyr","sauce","saucy","sauna","saute","savor","savoy","savvy","scald","scale","scalp","scaly","scamp","scant","scare","scarf","scary","scene","scent","scion","scoff","scold","scone","scoop","scope","score","scorn","scour","scout","scowl","scram","scrap","scree","screw","scrub","scrum","scuba","sedan","seedy","segue","seize","semen","sense","sepia","serif","serum","serve","setup","seven","sever","sewer","shack","shade","shady","shaft","shake","shaky","shale","shall","shalt","shame","shank","shape","shard","share","shark","sharp","shave","shawl","shear","sheen","sheep","sheer","sheet","sheik","shelf","shell","shied","shift","shine","shiny","shire","shirk","shirt","shoal","shock","shone","shook","shoot","shore","shorn","short","shout","shove","shown","showy","shrew","shrub","shrug","shuck","shunt","shush","shyly","siege","sieve","sight","sigma","silky","silly","since","sinew","singe","siren","sissy","sixth","sixty","skate","skier","skiff","skill","skimp","skirt","skulk","skull","skunk","slack","slain","slang","slant","slash","slate","slave","sleek","sleep","sleet","slept","slice","slick","slide","slime","slimy","sling","slink","sloop","slope","slosh","sloth","slump","slung","slunk","slurp","slush","slyly","smack","small","smart","smash","smear","smell","smelt","smile","smirk","smite","smith","smock","smoke","smoky","smote","snack","snail","snake","snaky","snare","snarl","sneak","sneer","snide","sniff","snipe","snoop","snore","snort","snout","snowy","snuck","snuff","soapy","sober","soggy","solar","solid","solve","sonar","sonic","sooth","sooty","sorry","sound","south","sower","space","spade","spank","spare","spark","spasm","spawn","speak","spear","speck","speed","spell","spelt","spend","spent","sperm","spice","spicy","spied","spiel","spike","spiky","spill","spilt","spine","spiny","spire","spite","splat","split","spoil","spoke","spoof","spook","spool","spoon","spore","sport","spout","spray","spree","sprig","spunk","spurn","spurt","squad","squat","squib","stack","staff","stage","staid","stain","stair","stake","stale","stalk","stall","stamp","stand","stank","stare","stark","start","stash","state","stave","stead","steak","steal","steam","steed","steel","steep","steer","stein","stern","stick","stiff","still","stilt","sting","stink","stint","stock","stoic","stoke","stole","stomp","stone","stony","stood","stool","stoop","store","stork","storm","story","stout","stove","strap","straw","stray","strip","strut","stuck","study","stuff","stump","stung","stunk","stunt","style","suave","sugar","suing","suite","sulky","sully","sumac","sunny","super","surer","surge","surly","sushi","swami","swamp","swarm","swash","swath","swear","sweat","sweep","sweet","swell","swept","swift","swill","swine","swing","swirl","swish","swoon","swoop","sword","swore","sworn","swung","synod","syrup","tabby","table","taboo","tacit","tacky","taffy","taint","taken","taker","tally","talon","tamer","tango","tangy","taper","tapir","tardy","tarot","taste","tasty","tatty","taunt","tawny","teach","teary","tease","teddy","teeth","tempo","tenet","tenor","tense","tenth","tepee","tepid","terra","terse","testy","thank","theft","their","theme","there","these","theta","thick","thief","thigh","thing","think","third","thong","thorn","those","three","threw","throb","throw","thrum","thumb","thump","thyme","tiara","tibia","tidal","tiger","tight","tilde","timer","timid","tipsy","titan","tithe","title","toast","today","toddy","token","tonal","tonga","tonic","tooth","topaz","topic","torch","torso","torus","total","totem","touch","tough","towel","tower","toxic","toxin","trace","track","tract","trade","trail","train","trait","tramp","trash","trawl","tread","treat","trend","triad","trial","tribe","trice","trick","tried","tripe","trite","troll","troop","trope","trout","trove","truce","truck","truer","truly","trump","trunk","truss","trust","truth","tryst","tubal","tuber","tulip","tulle","tumor","tunic","turbo","tutor","twang","tweak","tweed","tweet","twice","twine","twirl","twist","twixt","tying","udder","ulcer","ultra","umbra","uncle","uncut","under","undid","undue","unfed","unfit","unify","union","unite","unity","unlit","unmet","unset","untie","until","unwed","unzip","upper","upset","urban","urine","usage","usher","using","usual","usurp","utile","utter","vague","valet","valid","valor","value","valve","vapid","vapor","vault","vaunt","vegan","venom","venue","verge","verse","verso","verve","vicar","video","vigil","vigor","villa","vinyl","viola","viper","viral","virus","visit","visor","vista","vital","vivid","vixen","vocal","vodka","vogue","voice","voila","vomit","voter","vouch","vowel","vying","wacky","wafer","wager","wagon","waist","waive","waltz","warty","waste","watch","water","waver","waxen","weary","weave","wedge","weedy","weigh","weird","welch","welsh","wench","whack","whale","wharf","wheat","wheel","whelp","where","which","whiff","while","whine","whiny","whirl","whisk","white","whole","whoop","whose","widen","wider","widow","width","wield","wight","willy","wimpy","wince","winch","windy","wiser","wispy","witch","witty","woken","woman","women","woody","wooer","wooly","woozy","wordy","world","worry","worse","worst","worth","would","wound","woven","wrack","wrath","wreak","wreck","wrest","wring","wrist","write","wrong","wrote","wrung","wryly","yacht","yearn","yeast","yield","young","youth","zebra","zesty","zonal"]}},21:function(e,t,a){e.exports=a(28)},28:function(e,t,a){"use strict";a.r(t);var r=a(0),n=a.n(r),s=a(19),o=a.n(s),i=a(11),l=a(1),c=a(5),u=a(6),h=a(10),d=a(8),m=a(9);function p(e){return n.a.createElement("nav",null,n.a.createElement("div",{class:"container-fluid"},n.a.createElement("div",{class:"navbar-expand",id:"navbarSupportedContent"},n.a.createElement("ul",{class:"navbar-nav me-auto mb-2 mb-lg-0"},n.a.createElement("li",{class:"nav-item"},n.a.createElement(i.a,{to:"/",class:"nav-link","aria-current":"page"},"Home")),n.a.createElement("li",{class:"nav-item"},n.a.createElement(i.a,{to:"wordle",class:"nav-link"},"Wordle")),n.a.createElement("li",{class:"nav-item"},n.a.createElement(i.a,{to:"wIKI",class:"nav-link"},"Wiki Game"))))))}var g=function(e){function t(e){var a;return Object(c.a)(this,t),a=Object(h.a)(this,Object(d.a)(t).call(this,e)),console.log(e),a}return Object(m.a)(t,e),Object(u.a)(t,[{key:"render",value:function(){return n.a.createElement("div",{class:"row bg-secondary bg-opacity-50 shadow m-2"},n.a.createElement("div",{class:"col-md-6 d-flex justify-content-center"},n.a.createElement("img",{class:"rounded mx-auto d-block m-5",style:{width:"auto",height:"auto",maxWidth:"100%",maxHeight:"100%"},src:this.props.image})),n.a.createElement("div",{class:"col-md-6"},n.a.createElement("div",{class:"m-2"},n.a.createElement("h3",null,this.props.title),n.a.createElement("h4",null,this.props.subtitle),n.a.createElement("ul",null,this.props.contents&&this.props.contents.map(function(e){return n.a.createElement("li",null,"- "+e)})))))}}]),t}(n.a.Component),y={title:"C#: 2 years experience",subtitle:".NET Framework, Core and ASP.NetCore",image:"img/dotnet-logo.png",contents:["Profound Medical: Ported a large (1M lines) application from .NET Framework 4.8 to .NET 6","Profound Medical: Built an Automated UI test framework to test that application","Profound Medical: Built a simulator that emulates MRI scanning an object in different orientations","Profound Medical: Rewrote a WebSockets application to use ASP.NetCore"]},f={title:"Python: 3 years experience",subtitle:"NumPy, Matplotlib, OpenCV, PyTorch",image:"img/python-logo.png",contents:["CSC320 Intro Visual Computing: Used Numpy and OpenCV for image processing assignments","CSC311 Intro Machine Learning: Used Numpy, Matplotlib and Pytorch for machine learning tasks and visualizations","CSC384 Intro Artificial Intelligence: Used Python to play Checkers and do parts of speech tagging","Analyzed course evaluations to find trends in difficulty","Created a Wordle solver that works perfectly on the standard word list"]},b={title:"C: 1 year experience",subtitle:"UNIX, Physics simulations",image:"img/clang.png",contents:["CSC369 Operating Systems: Used C to implement a threading library and a simple file system","Profound Medical: Ported ultrasound heating simulation from C to Dotnet 6"]},v=function(e){function t(){return Object(c.a)(this,t),Object(h.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(u.a)(t,[{key:"render",value:function(){return n.a.createElement(n.a.Fragment,null,n.a.createElement("div",{class:"gradient-background"},n.a.createElement(p,null),n.a.createElement("div",{class:"jumbotron container"},n.a.createElement("h1",{class:"text-center text-primary"},"James Widjaja"),n.a.createElement("h2",{class:"text-center text-secondary"},"Experience with Machine Learning, Enterprise Applications, and React")),n.a.createElement("div",{class:"m-2"},n.a.createElement("h1",{class:"text-center"},"Languages"),n.a.createElement(g,y),n.a.createElement(g,f),n.a.createElement(g,b)),n.a.createElement("div",{class:"m-2"},n.a.createElement("h1",{class:"text-center"},"Projects"),n.a.createElement("div",{class:"row m-2"},n.a.createElement("div",{class:"col-sm-4"},n.a.createElement("div",{class:"card",style:{width:"18rem"}},n.a.createElement(i.a,{to:"wordle"},n.a.createElement("img",{src:"img/wordle.png",class:"card-img-top",alt:"..."}),n.a.createElement("div",{class:"card-body"},n.a.createElement("p",{class:"card-text"},"Sample wordle app with a tool to suggest best word"))))),n.a.createElement("div",{class:"col-sm-4"},n.a.createElement("div",{class:"card",style:{width:"18rem"}},n.a.createElement(i.a,{to:"wiki"},n.a.createElement("img",{src:"img/wikipedia_search.jpg",class:"card-img-top",alt:"..."}),n.a.createElement("div",{class:"card-body"},n.a.createElement("p",{class:"card-text"},"Wikipedia Path Finder with AI Embeddings")))))))))}}]),t}(n.a.Component),w=a(7),k=a(20);function E(e,t){var a="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!a){if(Array.isArray(e)||(a=function(e,t){if(!e)return;if("string"===typeof e)return x(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);"Object"===a&&e.constructor&&(a=e.constructor.name);if("Map"===a||"Set"===a)return Array.from(e);if("Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return x(e,t)}(e))||t&&e&&"number"===typeof e.length){a&&(e=a);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,i=!1;return{s:function(){a=a.call(e)},n:function(){var e=a.next();return o=e.done,e},e:function(e){i=!0,s=e},f:function(){try{o||null==a.return||a.return()}finally{if(i)throw s}}}}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,r=new Array(t);a<t;a++)r[a]=e[a];return r}var j=function(){function e(){var t=this,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Object(c.a)(this,e),0===a.length&&(a=k.words);var r=Math.floor(Math.random()*a.length);this.gameWord=a[r],console.log(this.gameWord),this.wordSample=a,this.wordSet=new Set,a.forEach(function(e){return t.wordSet.add(e)}),this.won=!1,this.attempts=[],this.foundLetterPosition=["","","","",""],this.foundLetterWrongPosition=new Set,this.wrongLetters=new Set}return Object(u.a)(e,[{key:"isWordValid",value:function(e){return this.wordSet.has(e)}},{key:"isWordPossible",value:function(e){for(var t=0;t<e.length;t++)if(this.wrongLetters.has(e[t]))return!1;for(var a=0;a<e.length;a++){if(""!==this.foundLetterPosition[a]&&e[a]!==this.foundLetterPosition[a])return!1;if(this.foundLetterWrongPosition.has(JSON.stringify([e[a],a])))return!1}var r,n=new Set(e.split("")),s=E(this.foundLetterWrongPosition);try{for(s.s();!(r=s.n()).done;){var o=r.value;if(!n.has(JSON.parse(o)[0]))return!1}}catch(i){s.e(i)}finally{s.f()}return!0}},{key:"guessWord",value:function(e){var t=this;if(!this.isWordValid(e))throw new Error("Not in word list");this.attempts.push(e);for(var a=["-","-","-","-","-"],r=function(r){var n=e[r];n===t.gameWord[r]?(t.foundLetterPosition[r]=n,a[r]="="):t.gameWord.includes(n)?(t.foundLetterWrongPosition.add(JSON.stringify([n,r])),e.slice(0,r).split("").filter(function(e){return e===n}).length<=t.gameWord.split("").filter(function(e){return e===n}).length&&(a[r]="+")):t.wrongLetters.add(n)},n=0;n<5;n++)r(n);return a.every(function(e){return"="===e})&&(this.won=!0),a}},{key:"updateState",value:function(e,t){var a=this;this.attempts.push(e),t.forEach(function(t,r){var n=e[r];if("="===t)a.foundLetterPosition[r]=n;else if("+"===t)a.foundLetterWrongPosition.add(JSON.stringify([n,r]));else{var s=new Set;a.foundLetterWrongPosition.forEach(function(e){s.add(JSON.parse(e)[0])}),s.has(n)||a.foundLetterPosition.includes(n)||a.wrongLetters.add(n)}})}}]),e}(),S=(a(18),function(e){function t(){return Object(c.a)(this,t),Object(h.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(u.a)(t,[{key:"keyUp",value:function(e,t){"Backspace"===e.key?""===this.props.inputRefs[t].current.value&&t>0&&e&&this.props.inputRefs[t-1].current.focus():t<4&&this.props.inputRefs[t+1].current.focus()}},{key:"keyDown",value:function(e,t){console.log(e),13===e.keyCode&&4===t&&this.props.onEnter()}},{key:"render",value:function(){for(var e=this,t=[],a=function(a){t.push(n.a.createElement("input",{className:"tile "+e.props.background[a],onKeyUp:function(t){return e.keyUp(t,a)},maxLength:1,value:e.props.value[a],onChange:function(t){return e.props.onChange(t,a)},ref:e.props.inputRefs[a],onKeyDown:function(t){return e.keyDown(t,a)},enterKeyHint:a<4?"next":"done",disabled:!e.props.isEditable}))},r=0;r<5;r++)a(r);return n.a.createElement("div",null,t)}}]),t}(n.a.Component)),O=function(e){function t(e){var a;Object(c.a)(this,t);var r=[];(a=Object(h.a)(this,Object(d.a)(t).call(this,e))).guessRefs=[];for(var s=0;s<6;s++){a.guessRefs.push([]),r.push([]);for(var o=0;o<5;o++)a.guessRefs[s].push(n.a.createRef()),r[s].push("white")}return a.state={guesses:Array.from(Array(6),function(){return new Array(5).fill("")}),backgrounds:r,numGuesses:0,helpText:"",game:new j},a.setState({}),a}return Object(m.a)(t,e),Object(u.a)(t,[{key:"onChange",value:function(e,t){var a=Object(w.a)(this.state.guesses);a[this.state.numGuesses]=Object(w.a)(a[this.state.numGuesses]),a[this.state.numGuesses][t]=e.target.value,this.setState({guesses:a})}},{key:"onEnter",value:function(e){var t=this.state.guesses[this.state.numGuesses].join("");t=t.toLowerCase();try{var a=this.state.game.guessWord(t),r=this.state.backgrounds;a.forEach(function(t,a){r[e][a]="="===t?"green":"+"===t?"yellow":"gray"});var n=this.state.numGuesses;this.setState({numGuesses:this.state.numGuesses+1}),this.setState({background:r}),this.state.game.won?this.setState({helpText:"Congratulations! "}):n>5?this.setState({helpText:"Too bad, the word was "+this.state.game.gameWord}):this.setState({helpText:""})}catch(s){console.log(s),this.setState({helpText:"Invalid word!"})}}},{key:"onRestart",value:function(){for(var e=[],t=0;t<6;t++){e.push([]);for(var a=0;a<5;a++)e[t].push("white")}this.setState({guesses:Array.from(Array(6),function(){return new Array(5).fill("")}),backgrounds:e,numGuesses:0,helpText:"",game:new j})}},{key:"renderGuess",value:function(e){var t=this;return n.a.createElement(S,{key:"wordleRow"+e,inputRefs:this.guessRefs[e],isEditable:e===this.state.numGuesses,onEnter:function(){e===t.state.numGuesses&&t.onEnter(e)},onChange:function(a,r){e===t.state.numGuesses&&t.onChange(a,r)},value:this.state.guesses[e],background:this.state.backgrounds[e]})}},{key:"render",value:function(){for(var e=this,t=[],a=0;a<6;a++)t.push(this.renderGuess(a));return n.a.createElement("div",null,n.a.createElement("h2",null,this.state.helpText),n.a.createElement("button",{title:"Restart",onClick:function(){return e.onRestart()}},"Restart"),t)}}]),t}(n.a.Component);function W(e,t){var a="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!a){if(Array.isArray(e)||(a=function(e,t){if(!e)return;if("string"===typeof e)return C(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);"Object"===a&&e.constructor&&(a=e.constructor.name);if("Map"===a||"Set"===a)return Array.from(e);if("Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return C(e,t)}(e))||t&&e&&"number"===typeof e.length){a&&(e=a);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,i=!1;return{s:function(){a=a.call(e)},n:function(){var e=a.next();return o=e.done,e},e:function(e){i=!0,s=e},f:function(){try{o||null==a.return||a.return()}finally{if(i)throw s}}}}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,r=new Array(t);a<t;a++)r[a]=e[a];return r}var z=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;Object(c.a)(this,e),this.game=t,this.possibleWords=[],null!==this.game&&(this.possibleWords=JSON.parse(JSON.stringify(t.wordSample)))}return Object(u.a)(e,[{key:"guessWord",value:function(e){var t=this;this.game.guessWord(e),this.possibleWords=this.possibleWords.filter(function(e){return t.game.isWordPossible(e)})}},{key:"updateGameState",value:function(e,t){var a=this;this.game.updateState(e.split(""),t.split("")),console.log(t),console.log(this.game.foundLetterPosition),console.log(this.game.foundLetterWrongPosition),console.log(this.game.wrongLetters),this.possibleWords=this.possibleWords.filter(function(e){return a.game.isWordPossible(e)}),console.log(this.possibleWords)}},{key:"newGame",value:function(e){this.game=e,this.possibleWords=JSON.parse(JSON.stringify(e.wordSample))}},{key:"generateGuess",value:function(){if(0===this.game.attempts.length)return"raise";var e=[],t=this.countLetterOccurences(this.possibleWords);return e=(e=e.concat(this.commonLettersStrategy(this.possibleWords,t).slice(0,10))).concat(this.maximizeInformationStrategy(this.game.wordSample,t).slice(0,10)),this.findBestWord(e)}},{key:"countLetterOccurences",value:function(e){for(var t=[],a=0;a<5;a++)t.push(new Map);return e.forEach(function(e){for(var a=0;a<e.length;a++)if(t[a].has(e[a])){var r=t[a].get(e[a]);t[a].set(e[a],r+1)}else t[a].set(e[a],1)}),t}},{key:"commonLettersStrategy",value:function(e,t){var a=[];return e.forEach(function(e){for(var r=0,n=0;n<e.length;n++)t[n].has(e[n])&&(r+=t[n].get(e[n]));a.push([e,r])}),a.sort(function(e,t){return t[1]-e[1]}),a.map(function(e){return e[0]})}},{key:"maximizeInformationStrategy",value:function(e,t){var a=this,r=new Map,n=[];return t.forEach(function(e){e.forEach(function(e,t){r.has(t)?r.set(t,r.get(t)+e):r.set(t,e)})}),e.forEach(function(e){for(var s=0,o=[],i=0;i<e.length;i++){if(!a.game.wrongLetters.has(e[i]))if(!a.game.foundLetterPosition.includes(e[i]))o.push(e[i]),e.slice(0,i).includes(e[i])||(r.has(e[i])&&(s+=r.get(e[i])),t[i].has(e[i])&&(s+=t[i].get(e[i])))}n.push([e,s])}),n.sort(function(e,t){return t[1]-e[1]}),n.map(function(e){return e[0]})}},{key:"calculateOptions",value:function(e){var t=new j,a=new Map;return this.possibleWords.forEach(function(r){t.gameWord=r;var n=t.guessWord(e).join();a.has(n)?a.get(n).push(r):a.set(n,[r])}),a}},{key:"findBestWord",value:function(e){var t=this,a=e[0],r=this.possibleWords.length;return e.forEach(function(e){var n,s=t.calculateOptions(e),o=0,i=W(s.values());try{for(i.s();!(n=i.n()).done;){var l=n.value;l.length>o&&(o=l.length)}}catch(c){i.e(c)}finally{i.f()}s.has("=,=,=,=,=")&&(o-=.5),o<r&&(r=o,a=e)}),a}}]),e}();function G(e){for(var t=[],a=0;a<5;a++)t.push(n.a.createElement("select",{className:"tile",key:"chooser "+a,ref:e.refs[a]},n.a.createElement("option",{value:"green",className:"green"},"Green"),n.a.createElement("option",{value:"yellow",className:"yellow"},"Yellow"),n.a.createElement("option",{value:"gray",className:"gray"},"Gray")));return n.a.createElement(n.a.Fragment,null,t)}var P=function(e){function t(e){var a;Object(c.a)(this,t);var r=[];(a=Object(h.a)(this,Object(d.a)(t).call(this,e))).guessRefs=[],a.selectRefs=[];for(var s=0;s<5;s++)a.selectRefs.push(n.a.createRef());for(var o=0;o<6;o++){a.guessRefs.push([]),r.push([]);for(var i=0;i<5;i++)a.guessRefs[o].push(n.a.createRef()),r[o].push("white")}var l=new j,u=new z(l),m=Array.from(Array(6),function(){return new Array(5).fill("")}),p=u.generateGuess();return m[0]=p.split(""),a.state={guesses:m,backgrounds:r,numGuesses:0,helpText:"",game:l,guessor:u},a}return Object(m.a)(t,e),Object(u.a)(t,[{key:"onEnter",value:function(){var e=this,t=this.state.guesses[this.state.numGuesses].join("");if(t=t.toLowerCase(),this.state.guessor.game.isWordValid(t)){var a="",r=this.state.backgrounds;this.selectRefs.forEach(function(t,n){if(r[e.state.numGuesses][n]=t.current.value,"green"===t.current.value)a=a.concat("=");else if("yellow"===t.current.value)a=a.concat("+");else{if("gray"!==t.current.value)return void e.setState({helpText:"Please select results"});a=a.concat("-")}}),this.setState({background:r}),this.state.guessor.updateGameState(t,a);var n=this.state.guessor.generateGuess(),s=Object(w.a)(this.state.guesses);s[this.state.numGuesses+1]=n.split(""),this.setState({numGuesses:this.state.numGuesses+1,guesses:s})}else this.setState({helpText:"Invalid word!"})}},{key:"onChange",value:function(e,t){var a=Object(w.a)(this.state.guesses);a[this.state.numGuesses]=Object(w.a)(a[this.state.numGuesses]),a[this.state.numGuesses][t]=e.target.value,this.setState({guesses:a})}},{key:"onRestart",value:function(){for(var e=[],t=0;t<6;t++){e.push([]);for(var a=0;a<5;a++)e[t].push("white")}var r=new j,n=Array.from(Array(6),function(){return new Array(5).fill("")}),s=this.state.guessor.generateGuess();n[0]=s.split(""),this.setState({guesses:n,backgrounds:e,numGuesses:0,helpText:"",game:r,guessor:new z(r)}),this.setState({guesses:n})}},{key:"renderGuess",value:function(e){var t=this;return n.a.createElement(S,{inputRefs:this.guessRefs[e],value:this.state.guesses[e],key:"guess "+e,isEditable:e===this.state.numGuesses,onEnter:function(){e===t.state.numGuesses&&t.onEnter()},onChange:function(a,r){e===t.state.numGuesses&&t.onChange(a,r)},background:this.state.backgrounds[e]})}},{key:"render",value:function(){for(var e=this,t=[],a=0;a<6;a++)t.push(this.renderGuess(a));return n.a.createElement("div",null,n.a.createElement("h2",null,this.state.helpText),n.a.createElement("button",{title:"Restart",onClick:function(){return e.onRestart()}},"Restart"),n.a.createElement("div",null,n.a.createElement("p",null,"Enter the result of the suggested guess, or your own word, here"),n.a.createElement(G,{refs:this.selectRefs}),t))}}]),t}(n.a.Component),I=function(e){function t(){return Object(c.a)(this,t),Object(h.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(u.a)(t,[{key:"render",value:function(){return n.a.createElement("div",{class:"gradient-background"},n.a.createElement(p,null),n.a.createElement("h1",{class:"text-center text-primary"},"Wordle solver"),n.a.createElement("p",{class:"m-4"},'I was curious whether Wordle has a strategy that always allow a guess within 6 moves. I created a solver that uses heuristics based on letter frequencies and showed that it is possible, given the limited word list of 2315 words. Wordle does accept more words, but the correct answer will be drawn from that word list. My implementation is not "optimal" because it does not definitely minimize the average number of attempts, but it is good enough to never lose. In fact, it is possible that a better algorithm can guess all words in 5 guesses, since my algorithm only has about 10 words that take 6 guesses. '),n.a.createElement("div",{class:"row"},n.a.createElement("div",{class:"col-md-6 d-flex justify-content-center"},n.a.createElement("div",{class:"text-center"},n.a.createElement("h3",null,"My Wordle copy"),n.a.createElement(O,null))),n.a.createElement("div",{class:"col-md-6 d-flex justify-content-center"},n.a.createElement("div",{class:"text-center"},n.a.createElement("h3",null,"Wordle solver"),n.a.createElement(P,null)))))}}]),t}(n.a.Component),A=a(13);function L(e){var t=e.text.split("*");return n.a.createElement(n.a.Fragment,null,t[0],n.a.createElement("a",{href:"https://en.wikipedia.org"+e.link},t[1]),t[2])}var R=function(e){function t(e){var a;return Object(c.a)(this,t),(a=Object(h.a)(this,Object(d.a)(t).call(this))).state={start_link:"/wiki/Leo_Tolstoy",end_link:"/wiki/Dolphin",searched_links:[],titles:[],intros:[],contexts:[],help_text:""},a.sendGameInfo=a.sendGameInfo.bind(Object(A.a)(Object(A.a)(a))),a}return Object(m.a)(t,e),Object(u.a)(t,[{key:"sendGameInfo",value:function(){var e=this;this.setState({help_text:"Processing, please wait"}),fetch("https://api.wiki-pages-project.com/api?start="+encodeURIComponent(this.state.start_link)+"&end="+encodeURIComponent(this.state.end_link)).then(function(t){console.log(t),200===t.status?t.json().then(function(t){e.setState({searched_links:t.searched_links,titles:t.titles,intros:t.intros,contexts:t.link_contexts,help_text:""})}):e.setState({searched_links:[],titles:[],intros:[],contexts:[],help_text:"Something went wrong"})})}},{key:"render",value:function(){var e=this;return n.a.createElement("div",{class:"gradient-background"},n.a.createElement(p,null),n.a.createElement("div",{class:"p-4"},n.a.createElement("h1",{class:"text-center text-primary"},"Wikipedia Pathfinder With Embeddings"),n.a.createElement("p",null,"One of my pastimes is playing the ",n.a.createElement("a",{href:"https://www.thewikigame.com/group",target:"_blank",rel:"noopener noreferrer"},"wiki game"),'The objective of the wiki game is to navigate to a selected page in Wikipedia from a random page, using only internal wikipedia links. The wiki game is rather well known as it is often used as an example to show the interrelatedness of different concepts. It\'s the internet version of "6 degrees of separation".'),n.a.createElement("p",null,'The game is a test of trivia knowledge and creativity in finding links between topics. For example, try find a path from "Leo Tolstoy" to "Dolphin". The way most players would do it is to go through Tolstoy\'s page, looking for anything sea related. Then they would find a list of marine animals and search for dolphin in that list.'),n.a.createElement("p",null,"I realized that text embeddings encode a measure of relatedness between words, so a program using those embeddings should be able to play this game. I used OpenAI's text-embedding-ada-002 model to create this solver."),n.a.createElement("p",null,n.a.createElement("b",null,"Q: What's so special about that? Can't you just use breadth first search to find a path?")),n.a.createElement("p",null,"A: Using search algorithms is against the rules of the game because you have to backtrack. It is true that a search algorithm will give a better answer (see ",n.a.createElement("a",{href:"https://www.sixdegreesofwikipedia.com/",target:"_blank",rel:"noopener noreferrer"},"Six degrees of wikipedia"),"). However, the point of this project is to create an AI that plays by human rules: It must select the next page without peeking at the contents, using just its own knowledge to guess whether the page is relevant to the target page. This project demonstrates that OpenAI's embeddings do in fact capture information about how words are related in a useful way."),n.a.createElement("div",null,n.a.createElement("div",null,"Enter start article"),n.a.createElement("input",{type:"text",value:this.state.start_link,onChange:function(t){return e.setState({start_link:t.target.value})}}),n.a.createElement("a",{href:"https://en.wikipedia.org"+this.state.start_link,target:"_blank",rel:"noopener noreferrer"},"Link to Start")),n.a.createElement("div",null,n.a.createElement("div",null,"Enter end article"),n.a.createElement("input",{type:"text",value:this.state.end_link,onChange:function(t){return e.setState({end_link:t.target.value})}}),n.a.createElement("a",{href:"https://en.wikipedia.org"+this.state.end_link,target:"_blank",rel:"noopener noreferrer"},"Link to End")),n.a.createElement("button",{onClick:this.sendGameInfo},"Play!"),n.a.createElement("h2",null,"Searched links"),n.a.createElement("h3",null,this.state.help_text),n.a.createElement(n.a.Fragment,null,this.state.searched_links.slice(0,-1).map(function(t,a){return n.a.createElement(n.a.Fragment,null,n.a.createElement("h2",null,n.a.createElement("a",{href:"https://en.wikipedia.org"+t,target:"_blank",rel:"noopener noreferrer"},e.state.titles[a])),n.a.createElement("p",null,e.state.intros[a]),n.a.createElement("p",null,"..."),n.a.createElement("p",null,"..."),n.a.createElement("p",null,n.a.createElement(L,{text:e.state.contexts[a],link:e.state.searched_links[a+1],target:"_blank",rel:"noopener noreferrer"})))}))))}}]),t}(n.a.Component),q=Object(i.b)([{path:"/",element:n.a.createElement(v,null)},{path:"/wordle",element:n.a.createElement(I,null)},{path:"/wiki",element:n.a.createElement(R,null)}]);o.a.render(n.a.createElement(l.b,{router:q}),document.getElementById("main"))}},[[21,1,2]]]);
//# sourceMappingURL=main.2c27d30c.chunk.js.map